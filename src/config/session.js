import session from "express-session";
import FileStoreFactory from "session-file-store";
import path from "path";

// MemoryStore cho dev (l∆∞u session trong b·ªô nh·ªõ)
import Memorystore from "memorystore"; // ƒê·∫£m b·∫£o r·∫±ng b·∫°n s·ª≠ d·ª•ng ƒë√∫ng t√™n import

const FileStore = FileStoreFactory(session);

const configSession = (app) => {
  const isProd = process.env.NODE_ENV === "production";

  const sessionOptions = {
    secret: "yennhicute", // üëâ N√™n ƒë∆∞a v√†o .env khi deploy
    resave: false,
    saveUninitialized: false,
    cookie: {
      secure: false, // üëâ N√™n set true n·∫øu d√πng HTTPS
      httpOnly: true,
      sameSite: "lax",
      maxAge: 3600000, // 1 gi·ªù
    },
  };

  if (isProd) {
    // S·ª≠ d·ª•ng FileStore cho m√¥i tr∆∞·ªùng production
    const storagePath = path.join(process.cwd(), "sessions");
    sessionOptions.store = new FileStore({
      path: storagePath,
      useAsyncWrite: true,
      reapInterval: 3600, // D·ªçn d·∫πp session c≈© m·ªói gi·ªù
      logFn: () => {},
    });
  } else {
    // S·ª≠ d·ª•ng MemoryStore cho m√¥i tr∆∞·ªùng development
    console.log("‚úÖ Using MemoryStore (Dev mode)");
    const MemoryStore = Memorystore(session); // Kh·ªüi t·∫°o MemoryStore b·∫±ng c√°ch n√†y
    sessionOptions.store = new MemoryStore({
      checkPeriod: 86400000, // D·ªçn d·∫πp session c≈© m·ªói 24h
    });
  }

  // C·∫•u h√¨nh session v·ªõi c√°c options ƒë√£ ch·ªçn
  app.use(session(sessionOptions));
};

export default configSession;
