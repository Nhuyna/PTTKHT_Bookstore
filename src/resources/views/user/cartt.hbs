{{session.user_id}}
<form action="/cart/thanhtoan" method="post" id="cartForm" class="min-h-screen" >
  <div class="max-w-6xl mx-auto mt-10 flex gap-6 min-h-screen">
    <div class="w-full max-w-sm bg-white p-6 rounded-2xl shadow-xl">
        
      <div class="flex justify-between text-gray-700 mb-2">
        <span>Thành tiền</span>
        <span class="total-amount">0 đ</span>
      </div>
      <hr class="my-2" />
      <div class="flex justify-between font-bold text-lg text-gray-900 mb-4">
        <span>Tổng Số Tiền (gồm VAT)</span>
        <input type="hidden" name="tongTien" id="tongTienInput" value="0" />
        <span class="total-amount text-red-600">0 đ</span>
      </div>
      <button
        type="submit"
        class="w-full bg-red-500 text-white font-bold py-2 px-4 rounded hover:bg-red-600"
      >
        THANH TOÁN
      </button>
    </div>


    <div class="bg-white p-6 rounded-2xl shadow-xl w-full">
      <h1 class="text-2xl font-bold mb-6 text-gray-800">Giỏ hàng Của Bạn</h1>

      {{#each cart}}
        <div class="flex items-start space-x-4 border-b pb-6 mb-6">
          <img
            src="{{this.Anh}}"
            class="w-20 h-28 object-cover rounded"
            alt=""
          />
          <div class="flex-1">
            <h2
              class="text-lg font-semibold text-gray-900"
            >{{this.TenSanPham}}</h2>
            <p
              class="text-red-600 font-semibold mt-2 item-price"
              data-price="{{this.Gia}}"
            >
              {{formatNumber this.Gia}}
              đ
            </p>
          </div>

          <div class="flex items-center space-x-2">
            <button
              type="button"
              class="px-2 py-1 text-lg font-bold border rounded decrease"
            >−</button>
            <span class="quantity">{{this.SoLuong}}</span>
            <input
              type="hidden"
              name="soluong[]"
              class="quantity-input"
              value="{{this.SoLuong}}"
            />
            <input
              type="hidden"
              name="idSanPham[]"
              value="{{this.SanPhamID}}"
            />
            <button
              type="button"
              class="px-2 py-1 text-lg font-bold border rounded increase"
            >+</button>
          </div>

          <div
            class="text-red-600 font-semibold ml-6 item-total"
            data-price="{{this.Gia}}"
          >
            0 đ
          </div>
          <button type="button" class="delete-btn ml-2 text-gray-400 hover:text-red-500 transition-colors duration-150 focus:outline-none"
           data-book-id="{{this.SanPhamID}}" data-user-id="{{session.user_id}}"
            onclick="xoaSanPham(this)" aria-label="Xóa sản phẩm"
            title="Xóa sản phẩm">
            <i class="fas fa-trash"></i>
          </button>
        </div>
      {{/each}}
    </div>
  </div>
</form>
<script>
  function xoaSanPham(button) {
    const productDiv = button.closest('[data-book-id][data-user-id]');
    const bookId = productDiv.dataset.bookId;
    const user_id = productDiv.dataset.userId;

    if (!confirm("Bạn có chắc chắn muốn xóa sản phẩm này khỏi giỏ hàng?")) return;

    fetch('cart/delete', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded'
        },
        body: `book_id=${bookId}`
    })
    .then(res => res.json())
    .then(data => {
        if (data.success) {
            productDiv.style.opacity = '0';
            productDiv.style.transform = 'translateX(20px)';
            productDiv.style.transition = 'all 0.3s ease-out';
            
            setTimeout(() => {
                productDiv.remove();
                const remainingItems = document.querySelectorAll('[data-book-id][data-cart-id]');
                if (remainingItems.length === 0) {
                    location.reload();
                }
            }, 300);


        } else {
            alert(data.message || 'Xóa sản phẩm thất bại!');
        }
    })
    .catch(err => {
        console.error("Lỗi xoá:", err);
        alert("Có lỗi xảy ra khi xoá sản phẩm.");
    });
}
</script>
<script>
  function formatCurrency(value) { return new Intl.NumberFormat('vi-VN', {
  style: 'currency', currency: 'VND' }).format(value); } function updateTotal()
  { const items = document.querySelectorAll('.quantity'); let total = 0;
  items.forEach((qtyEl, index) => { const priceEl =
  document.querySelectorAll('.item-price')[index]; const quantityInput =
  document.querySelectorAll('.quantity-input')[index]; const itemTotalEl =
  document.querySelectorAll('.item-total')[index]; const price =
  parseFloat(priceEl.dataset.price); const qty = parseInt(qtyEl.textContent);
  const itemTotal = price * qty; itemTotalEl.textContent =
  formatCurrency(itemTotal); quantityInput.value = qty; total += itemTotal; });
  document.getElementById('tongTienInput').value = total;
  document.querySelectorAll('.total-amount').forEach(el => { el.textContent =
  formatCurrency(total); }); }
  document.querySelectorAll('.increase').forEach((btn, index) => {
  btn.addEventListener('click', () => { const qtyEls =
  document.querySelectorAll('.quantity'); const qtyEl = qtyEls[index]; let qty =
  parseInt(qtyEl.textContent); qty++; qtyEl.textContent = qty; updateTotal();
  }); }); document.querySelectorAll('.decrease').forEach((btn, index) => {
  btn.addEventListener('click', () => { const qtyEls =
  document.querySelectorAll('.quantity'); const qtyEl = qtyEls[index]; let qty =
  parseInt(qtyEl.textContent); if (qty > 1) { qty--; qtyEl.textContent = qty;
  updateTotal(); } }); }); 
  updateTotal();
</script>

