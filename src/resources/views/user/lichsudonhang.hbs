
    <div class="bg-gray-50 p-4 min-h-screen">
  <!-- Tabs -->
  <div class="max-w-4xl mx-auto mb-4">
    <div class="flex justify-between border-b">
<a href="/lichsudonhang" class="tab-button px-4 py-2 ">
  T·∫•t c·∫£
</a>

<a href="/lichsudonhang?status=Ch·ªù x√°c nh·∫≠n" class="tab-button px-4 py-2 ">
  Ch·ªù giao h√†ng
</a>

<a href="/lichsudonhang?status=ƒê√£ giao" class="tab-button px-4 py-2 ">
  Ho√†n th√†nh
</a>
{{!-- 
<a href="/lichsudonhang?status=ƒê√£ h·ªßy" class="tab-button px-4 py-2 ">
  ƒê√£ hu·ª∑
</a> --}}

<a href="/lichsudonhang?status=Tr·∫£ h√†ng" class="tab-button px-4 py-2 ">
  Tr·∫£ h√†ng/Ho√†n ti·ªÅn
</a>


    </div>
    <!-- Search bar -->
    <div class="mt-2 bg-gray-100 rounded flex items-center px-4 py-2">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-4.35-4.35m0 0A7.5 7.5 0 1110.5 3a7.5 7.5 0 016.15 13.65z" />
      </svg>
      <input type="text" placeholder="B·∫°n c√≥ th·ªÉ t√¨m ki·∫øm theo t√™n Shop, ID ƒë∆°n h√†ng ho·∫∑c T√™n S·∫£n ph·∫©m" class="w-full bg-gray-100 focus:outline-none text-sm text-gray-700">
    </div>
  </div>

  <!-- Order Card -->
      {{#each history}}
  <div class="max-w-4xl mx-auto bg-white shadow-lg rounded-xl p-4 mt-4">
    <div class="bg-gray-50 px-4 py-2 rounded-md shadow-sm text-gray-700 text-lg inline-block mb-2">
      üìÖ Ng√†y ƒë·∫∑t h√†ng: {{NgayXuat}}
    </div>


    <div class="flex justify-between items-center  mb-4">
      <div class="flex items-center gap-3">
        {{!-- <button class="bg-red-500 text-white text-sm px-3 py-1 rounded hover:bg-red-600">üí¨ Chat</button> --}}
        <a href="/" class="border border-gray-300 text-base px-3 py-1 rounded hover:bg-gray-100 inline-block">
          üè™ Xem Shop
        </a>

      </div>

      <div class="flex items-center gap-3">
        <span class="text-green-500 flex items-center gap-1">
          <span class="{{TrangThaiColor}}">{{TrangThaiText}}</span>

        </span>
        {{!-- <span class="text-gray-400">|</span>
        <span class="text-yellow-500 font-bold uppercase">HO√ÄN TH√ÄNH </span> --}}
      </div>
    </div>


    {{#each ChiTietHoaDonXuat}}
      <div class="flex justify-between  pb-4 mb-4 border-t pt-4 mt-4">
        <div class="flex items-start gap-4">
          <img src="{{this.Anh}}" alt="math" class="w-24 h-24 object-cover rounded border">
          <div>
            <h2 class="font-semibold text-gray-700">T√™n : {{this.TenSanPham}}</h2>
            <p class="text-red-500 font-semibold mt-2">Gi√° : {{this.Gia}}</p>
            <p class="font-semibold mt-2">S·ªë l∆∞·ª£ng : {{this.SoLuong}}</p>
          </div>
        </div>

        <!-- Ph·∫£i: Th√†nh ti·ªÅn + Mua l·∫°i -->
        <div class="flex flex-col items-end justify-between">
          <div>
            <span class="text-lg font-medium text-gray-700">Th√†nh ti·ªÅn:</span>
            <span class="text-xl font-bold text-red-600 k">{{this.ThanhTien}}</span>
          </div>
          <div class="flex gap-2 mt-4">
            <form  style="display: inline;">
              <button data-product-id="{{IDSanPham}}" class="bg-red-500 add-to-cart hover:bg-red-600 text-white px-4 py-2 rounded-xl font-medium ">
                Mua L·∫°i
              </button>
            </form>
{{!-- 
            {{#unless ../DaHuy}}
            <form >
              <input type="hidden"  name="IDHoaDonXuat" value="{{../IDHoaDonXuat}}">

              <button  data-id="{{IDSanPham}}" type="submit" class="btn-huy-don text-gray-800 border border-gray-300 px-6 py-2 rounded-lg hover:bg-gray-100 transition">
                H·ªßy
              </button>
            </form>
            {{/unless}} --}}


          </div>
        </div>
      </div>

    {{/each}}
    <div class="flex flex-col items-start justify-between border-t pt-4 mt-4">
      <div>
        <span class="text-lg font-medium text-gray-700 mr-4">T·ªïng :</span>
        <span class="text-xl font-bold text-red-600 ">{{this.TongTien}}</span>
      </div>
    </div>
  </div>
  

  {{/each}}

  <script>
    function formatCurrencyVND(amount) {
      if (typeof amount !== 'number') {
        amount = parseFloat(amount);
      }

      return amount.toLocaleString('vi-VN', {
        maximumFractionDigits: 0
      }) + ' ƒë';
    }

    document.addEventListener("DOMContentLoaded", function () {
      const tabs = document.querySelectorAll(".tab-button");
      const activeClass = "text-red-500 border-b-2 border-red-500 font-medium";

      tabs.forEach(tab => {
        tab.addEventListener("click", function () {
          tabs.forEach(t => t.classList.remove(...activeClass.split(" ")));
          this.classList.add(...activeClass.split(" "));
        });
      });
    });
  </script>
  <script>
  document.querySelectorAll('.add-to-cart').forEach(button => {
    button.addEventListener('click', async () => {
      const productId = button.getAttribute('data-product-id');

      try {
        const response = await fetch('/cart/addToCart', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ productId })
        });

        const result = await response.json();

        alert(result.message);

        if (result.redirect) {
          window.location.href = result.redirect;
        }
      } catch (error) {
        alert("ƒê√£ x·∫£y ra l·ªói khi th√™m v√†o gi·ªè h√†ng.");
        console.error(error);
      }
    });
  });
</script>
<script>
  document.querySelectorAll('.btn-huy-don').forEach(button => {
    button.addEventListener('click', async () => {
      const IDHoaDonXuat = button.getAttribute('data-id');

      if (!confirm("B·∫°n c√≥ ch·∫Øc mu·ªën h·ªßy ƒë∆°n h√†ng n√†y kh√¥ng?")) return;

      try {
        const response = await fetch("/order/huyDonHang", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ IDHoaDonXuat }),
        });

        const result = await response.json();

        if (result.success) {
          alert("ƒê√£ h·ªßy ƒë∆°n h√†ng.");
          location.reload();
        } else {
          alert("H·ªßy ƒë∆°n h√†ng th·∫•t b·∫°i: " + result.message);
        }
      } catch (error) {
        console.error("L·ªói khi g·ª≠i y√™u c·∫ßu h·ªßy:", error);
        alert("L·ªói khi g·ª≠i y√™u c·∫ßu h·ªßy ƒë∆°n h√†ng.");
      }
    });
  });
</script>

    </div>

